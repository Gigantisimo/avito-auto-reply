from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    ContextTypes, 
    ConversationHandler, 
    MessageHandler, 
    filters
)
import aiohttp
import sqlite3
import asyncio
from datetime import datetime
import base64
import os
import re
import io
# from PIL import Image
from dotenv import load_dotenv
import logging
import json
import sys
import firebase_admin
from firebase_admin import credentials, firestore

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    WAITING_CLIENT_ID,
    WAITING_CLIENT_SECRET,
    WAITING_USER_ID,
    WAITING_TEMPLATE,
    WAITING_IMAGE,  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
) = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]  # –õ–æ–≥–∏—Ä—É–µ–º –≤ stdout –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
)

class AvitoBot:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
        if not firebase_admin._apps:
            if os.getenv('FIREBASE_CREDENTIALS'):
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
                cred_json = base64.b64decode(os.getenv('FIREBASE_CREDENTIALS')).decode('utf-8')
                cred_dict = json.loads(cred_json)
                cred = credentials.Certificate(cred_dict)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                cred = credentials.Certificate('firebase-credentials.json')
            firebase_admin.initialize_app(cred)
        self.db = firestore.client()
        self.temp_credentials = {}

    def get_user(self, user_id: str):
        doc_ref = self.db.collection('users').document(user_id)
        doc = doc_ref.get()
        if doc.exists:
            return doc.to_dict()
        return None

    def save_user(self, user_id: str, data: dict):
        doc_ref = self.db.collection('users').document(user_id)
        doc_ref.set(data, merge=True)

    async def manage_accounts_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.callback_query:
            user_id = str(update.callback_query.from_user.id)
            message = update.callback_query.message
        else:
            user_id = str(update.message.from_user.id)
            message = update.message

        user_data = self.get_user(user_id)
        accounts = []
        if user_data:
            if user_data.get('client_id'):
                accounts.append(('1', '–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç', True))
            if user_data.get('client_id_2'):
                accounts.append(('2', '–í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç', True))

        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        for acc_id, name, enabled in accounts:
            status = "‚úÖ" if enabled else "‚ùå"
            keyboard.append([InlineKeyboardButton(
                f"{name} {status}",
                callback_data=f'account_{acc_id}'
            )])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if len(accounts) < 2:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='add_account')])
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            f"üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:\n\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ: {len(accounts)} –∏–∑ {len(accounts)}\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–≥–æ: 2 –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: {max(0, 2 - len(accounts))}"
        )
        
        if update.callback_query:
            await message.edit_text(text=message_text, reply_markup=reply_markup)
        else:
            await message.reply_text(text=message_text, reply_markup=reply_markup)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å Client ID", callback_data='add_client_id')],
            [InlineKeyboardButton("üîë –î–æ–±–∞–≤–∏—Ç—å Client Secret", callback_data='add_client_secret')],
            [InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å User ID", callback_data='add_user_id')],
            [InlineKeyboardButton("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞", callback_data='set_template')],
            [InlineKeyboardButton("üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data='upload_image')],
            [InlineKeyboardButton("üîÑ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data='toggle_auto_reply')],
            [InlineKeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='check_balance')],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", callback_data='manage_accounts')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='view_settings')],
            [InlineKeyboardButton("üì® –ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", url="t.me/avsender_bot")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –ê–≤–∏—Ç–æ!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = str(query.from_user.id)
        user_data = self.get_user(user_id)
        
        if query.data == 'add_client_id':
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Client ID:")
            return WAITING_CLIENT_ID
            
        elif query.data == 'add_client_secret':
            if user_id not in self.temp_credentials or 'client_id' not in self.temp_credentials[user_id]:
                await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ Client ID!")
                return ConversationHandler.END
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Client Secret:")
            return WAITING_CLIENT_SECRET
            
        elif query.data == 'add_user_id':
            if user_id not in self.temp_credentials or 'client_secret' not in self.temp_credentials[user_id]:
                await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ Client ID –∏ Client Secret!")
                return ConversationHandler.END
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à User ID:")
            return WAITING_USER_ID
            
        elif query.data == 'set_template':
            if not user_data:
                await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
                return
            await query.message.reply_text(
                "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –Ø –æ—Ç–≤–µ—á—É –≤–∞–º –ø–æ–∑–∂–µ."
            )
            return WAITING_TEMPLATE
            
        elif query.data == 'toggle_auto_reply':
            if not user_data:
                await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
                return
            new_status = not user_data['auto_reply_enabled']
            user_data['auto_reply_enabled'] = new_status
            self.save_user(user_id, user_data)
            await query.message.reply_text(
                f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç {'–≤–∫–ª—é—á–µ–Ω' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω'}"
            )
        elif query.data == 'view_settings':
            if not user_data:
                keyboard = [
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å Client ID", callback_data='add_client_id')],
                    [InlineKeyboardButton("üì® –ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", url="t.me/avsender_bot")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.edit_text(
                    "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
                    reply_markup=reply_markup
                )
                return

            settings_text = (
                "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                f"üîë Client ID: {user_data['client_id'][:10]}...{user_data['client_id'][-5:] if user_data['client_id'] else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                f"üîê Client Secret: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ' if user_data['client_secret'] else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå'}\n"
                f"üë§ User ID: {user_data['avito_user_id'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                f"üìù –®–∞–±–ª–æ–Ω: {user_data['template'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                f"üîÑ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: {'–í–∫–ª—é—á–µ–Ω ‚úÖ' if user_data['auto_reply_enabled'] else '–í—ã–∫–ª—é—á–µ–Ω ‚ùå'}\n\n"
                "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å Client ID", callback_data='add_client_id')],
                [InlineKeyboardButton("üîë –î–æ–±–∞–≤–∏—Ç—å Client Secret", callback_data='add_client_secret')],
                [InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å User ID", callback_data='add_user_id')],
                [InlineKeyboardButton("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞", callback_data='set_template')],
                [InlineKeyboardButton("üîÑ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data='toggle_auto_reply')],
                [InlineKeyboardButton("üì® –ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", url="t.me/avsender_bot")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_text(settings_text, reply_markup=reply_markup)
        elif query.data == 'upload_image':
            if not user_data:
                await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
                return ConversationHandler.END
            await query.message.reply_text(
                "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞—Ö.\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG"
            )
            return WAITING_IMAGE
        elif query.data == 'check_balance':
            if not user_data:
                await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
                return
            
            balances = await self.check_balance_and_advance(user_data)
            if balances:
                main_balance = balances['main_balance']
                advance_balance = balances['advance']
                
                message = "üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–∞—Ö:\n\n"
                
                if main_balance:
                    message += (
                        f"–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: {main_balance.get('real', 0)} ‚ÇΩ\n"
                        f"–ë–æ–Ω—É—Å—ã: {main_balance.get('bonus', 0)} ‚ÇΩ\n"
                    )
                
                if advance_balance is not None:
                    message += f"\n–ë–∞–ª–∞–Ω—Å –∞–≤–∞–Ω—Å–∞: {advance_balance:.2f} ‚ÇΩ"
                
                await query.message.reply_text(message)
            else:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–∞—Ö")
        elif query.data == 'manage_accounts':
            await self.manage_accounts_handler(update, context)
        
        elif query.data == 'buy_accounts':
            await self.buy_accounts_menu(update, context)
        
        elif query.data.startswith('buy_') and query.data != 'buy_accounts':  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            try:
                accounts_count = int(query.data.split('_')[1])
                amount = accounts_count * 200  # 200 —Ä—É–±–ª–µ–π –∑–∞ –∞–∫–∫–∞—É–Ω—Ç
                
                payment_service = PaymentService(os.getenv('TOCHKA_JWT_TOKEN'))
                qr_data = await payment_service.create_payment_qr(amount, accounts_count, user_id)
                
                if qr_data:
                    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    qr = Image.open(io.BytesIO(base64.b64decode(qr_data['image'])))
                    bio = io.BytesIO()
                    qr.save(bio, 'PNG')
                    bio.seek(0)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=bio,
                        caption=(
                            f"üí≥ –û–ø–ª–∞—Ç–∞ {accounts_count} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
                            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {qr_data['amount']}‚ÇΩ\n\n"
                            "1Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞\n"
                            "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É\n"
                            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"
                        ),
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
                                               callback_data=f'check_payment_{qr_data["qrc_id"]}')
                        ]])
                    )
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except ValueError:
                await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                print(f"Error processing payment: {e}")
                await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif query.data.startswith('check_payment_'):
            qrc_id = query.data.split('_')[2]
            payment_service = PaymentService(os.getenv('TOCHKA_JWT_TOKEN'))
            status = await payment_service.check_payment_status(qrc_id)
            
            if status == 'SUCCESS':
                if await self.process_successful_payment(user_id, qrc_id):
                    await query.message.edit_caption(
                        caption="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')
                        ]])
                    )
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            else:
                await query.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")

    async def handle_client_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = str(update.message.from_user.id)
        client_id = update.message.text.strip()
        
        if user_id not in self.temp_credentials:
            self.temp_credentials[user_id] = {}
        
        self.temp_credentials[user_id]['client_id'] = client_id
        await update.message.reply_text("‚úÖ Client ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ Client Secret.")
        return ConversationHandler.END

    async def handle_client_secret(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = str(update.message.from_user.id)
        client_secret = update.message.text.strip()
        
        self.temp_credentials[user_id]['client_secret'] = client_secret
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å Client ID", callback_data='add_client_id')],
            [InlineKeyboardButton("üîë –î–æ–±–∞–≤–∏—Ç—å Client Secret", callback_data='add_client_secret')],
            [InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å User ID", callback_data='add_user_id')],
            [InlineKeyboardButton("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞", callback_data='set_template')],
            [InlineKeyboardButton("üîÑ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data='toggle_auto_reply')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='view_settings')],
            [InlineKeyboardButton("üì® –ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", url="t.me/avsender_bot")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚úÖ Client Secret —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ User ID.", 
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    async def handle_user_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = str(update.message.from_user.id)
        avito_user_id = update.message.text.strip()
        
        self.temp_credentials[user_id]['avito_user_id'] = avito_user_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        self.save_user(user_id, {
            'client_id': self.temp_credentials[user_id]['client_id'],
            'client_secret': self.temp_credentials[user_id]['client_secret'],
            'avito_user_id': avito_user_id,
            'template': '',
            'auto_reply_enabled': False,
            'auto_reply_start_time': 0,
            'image_file_id': None
        })
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del self.temp_credentials[user_id]
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å Client ID", callback_data='add_client_id')],
            [InlineKeyboardButton("üîë –î–æ–±–∞–≤–∏—Ç—å Client Secret", callback_data='add_client_secret')],
            [InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å User ID", callback_data='add_user_id')],
            [InlineKeyboardButton("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞", callback_data='set_template')],
            [InlineKeyboardButton("üîÑ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data='toggle_auto_reply')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='view_settings')],
            [InlineKeyboardButton("üì® –ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", url="t.me/avsender_bot")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚úÖ –í—Å–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞\n"
            "2. –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç\n"
            "3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    async def handle_template(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = str(update.message.from_user.id)
        template = update.message.text.strip()
        
        if not template:
            await update.message.reply_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return ConversationHandler.END
            
        user_data = self.get_user(user_id)
        if not user_data:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            return ConversationHandler.END
            
        user_data['template'] = template
        self.save_user(user_id, user_data)
        
        await update.message.reply_text(
            "‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            f"–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:\n{template}"
        )
        return ConversationHandler.END

    async def get_token(self, client_id: str, client_secret: str) -> str:
        async with aiohttp.ClientSession() as session:
            data = {
                'grant_type': 'client_credentials',
                'client_id': client_id,
                'client_secret': client_secret
            }
            async with session.post('https://api.avito.ru/token', data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get('access_token')
                return None

    def save_replied_chat(self, user_id: str, chat_id: str):
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute('''
            INSERT OR REPLACE INTO replied_chats (user_id, chat_id, replied_at)
            VALUES (?, ?, ?)
        ''', (user_id, chat_id, int(datetime.now().timestamp())))
        conn.commit()
        conn.close()

    def has_replied_to_chat(self, user_id: str, chat_id: str) -> bool:
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        c.execute('SELECT 1 FROM replied_chats WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
        result = c.fetchone() is not None
        conn.close()
        return result

    async def check_messages(self, context: ContextTypes.DEFAULT_TYPE):
        users = self.get_active_users()
        for user_data in users:
            token = await self.get_token(user_data['client_id'], user_data['client_secret'])
            if not token:
                print(f"Failed to get token for user {user_data['user_id']}")
                continue

            async with aiohttp.ClientSession() as session:
                headers = {'Authorization': f'Bearer {token}'}
                params = {'unread_only': 'true', 'limit': '100'}
                url = f"https://api.avito.ru/messenger/v2/accounts/{user_data['avito_user_id']}/chats"
                
                try:
                    async with session.get(url, headers=headers, params=params) as response:
                        if response.status != 200:
                            print(f"Failed to get chats: {response.status}")
                            continue
                        
                        chats = await response.json()
                        for chat in chats.get('chats', []):
                            chat_id = chat.get('id')
                            if not chat_id:
                                continue

                            if self.has_replied_to_chat(user_data['user_id'], chat_id):
                                print(f"Already replied to chat {chat_id}")
                                continue

                            last_message_time = chat.get('last_message', {}).get('created', 0)
                            if last_message_time < user_data.get('auto_reply_start_time', 0):
                                print(f"Message in chat {chat_id} is too old")
                                continue

                            if not user_data.get('template'):
                                print(f"No template set for user {user_data['user_id']}")
                                continue

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                            if user_data.get('image_file_id'):
                                try:
                                    upload_url = f"https://api.avito.ru/messenger/v1/accounts/{user_data['avito_user_id']}/uploadImages"
                                    form_data = aiohttp.FormData()
                                    form_data.add_field('uploadfile[]', 
                                                      user_data['image_file_id'],
                                                      filename='image.jpg',
                                                      content_type='image/jpeg')
                                    
                                    async with session.post(upload_url, headers=headers, data=form_data) as upload_response:
                                        if upload_response.status == 200:
                                            upload_data = await upload_response.json()
                                            image_id = list(upload_data.keys())[0]
                                            
                                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                            image_data = {
                                                'image_id': image_id
                                            }
                                            image_url = f"https://api.avito.ru/messenger/v1/accounts/{user_data['avito_user_id']}/chats/{chat_id}/messages/image"
                                            await session.post(image_url, headers=headers, json=image_data)
                                            print(f"Successfully sent image to chat {chat_id}")
                                            await asyncio.sleep(2)
                                except Exception as e:
                                    print(f"Error sending image: {e}")

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                            message_data = {
                                'message': {'text': user_data['template']},
                                'type': 'text'
                            }
                            
                            msg_url = f"https://api.avito.ru/messenger/v1/accounts/{user_data['avito_user_id']}/chats/{chat_id}/messages"
                            async with session.post(msg_url, headers=headers, json=message_data) as msg_response:
                                if msg_response.status == 200:
                                    print(f"Successfully sent message to chat {chat_id}")
                                    self.save_replied_chat(user_data['user_id'], chat_id)
                                else:
                                    print(f"Failed to send message: {msg_response.status}")
                except Exception as e:
                    print(f"Error checking messages for user {user_data['user_id']}: {e}")
                    continue

    async def handle_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return ConversationHandler.END

    async def check_balance_and_advance(self, user_data):
        token = await self.get_token(user_data['client_id'], user_data['client_secret'])
        if not token:
            return None
        
        async with aiohttp.ClientSession() as session:
            headers = {
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json',
                'X-Source': 'telegram_bot'
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
            balance_url = f"https://api.avito.ru/core/v1/accounts/{user_data['avito_user_id']}/balance/"
            balance_data = None
            try:
                async with session.get(balance_url, headers=headers) as response:
                    if response.status == 200:
                        balance_data = await response.json()
            except Exception as e:
                print(f"Error checking main balance: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞–Ω—Å
            advance_url = "https://api.avito.ru/cpa/v3/balanceInfo"
            advance_data = None
            try:
                async with session.post(advance_url, headers=headers, json={}) as response:
                    if response.status == 200:
                        advance_data = await response.json()
            except Exception as e:
                print(f"Error checking advance balance: {e}")

            return {
                'main_balance': balance_data,
                'advance': advance_data.get('balance', 0) / 100 if advance_data else None
            }

    async def check_balance_periodically(self, context: ContextTypes.DEFAULT_TYPE):
        print("\nüí∞ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤")
        users = self.get_active_users()
        print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        for user_data in users:
            try:
                balances = await self.check_balance_and_advance(user_data)
                
                if balances:
                    main_balance = balances['main_balance']
                    advance_balance = balances['advance']
                    warning_msg = []
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ < 200)
                    if (main_balance and main_balance.get('real', 0) < 200 and 
                        not user_data.get('notified_main_balance_200')):
                        warning_msg.append(
                            f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 200 —Ä—É–±–ª–µ–π!\n"
                            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {main_balance.get('real', 0)} ‚ÇΩ"
                        )
                        user_data['notified_main_balance_200'] = 1
                        self.save_user(user_data['user_id'], user_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞–Ω—Å–∞ (–ø—Ä–∏ < 200 –∏ < 100)
                    if advance_balance is not None:
                        if advance_balance < 200 and not user_data.get('notified_advance_200'):
                            warning_msg.append(
                                f"‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –∞–≤–∞–Ω—Å–∞ –º–µ–Ω—å—à–µ 200 —Ä—É–±–ª–µ–π!\n"
                                f"–¢–µ–∫—É—â–∏–π –∞–≤–∞–Ω—Å: {advance_balance:.2f} ‚ÇΩ"
                            )
                            user_data['notified_advance_200'] = 1
                            self.save_user(user_data['user_id'], user_data)
                        
                        if advance_balance < 100 and not user_data.get('notified_advance_100'):
                            warning_msg.append(
                                f"‚ùóÔ∏è –ë–∞–ª–∞–Ω—Å –∞–≤–∞–Ω—Å–∞ –º–µ–Ω—å—à–µ 100 —Ä—É–±–ª–µ–π!\n"
                                f"–¢–µ–∫—É—â–∏–π –∞–≤–∞–Ω—Å: {advance_balance:.2f} ‚ÇΩ"
                            )
                            user_data['notified_advance_100'] = 1
                            self.save_user(user_data['user_id'], user_data)
                    
                    if warning_msg:
                        await context.bot.send_message(
                            user_data['user_id'],
                            "‚ùóÔ∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å!\n\n" + "\n\n".join(warning_msg) +
                            "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º!"
                        )
                        print(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['user_id']}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']}: {e}")
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

    async def process_successful_payment(self, user_id: str, qrc_id: str):
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        try:
            c.execute('BEGIN')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            c.execute('''
                UPDATE qr_payments 
                SET status = 'succeeded', paid_at = strftime('%s','now')
                WHERE qrc_id = ? AND user_id = ? AND status = 'pending'
                RETURNING accounts_count
            ''', (qrc_id, user_id))
            
            result = c.fetchone()
            if result:
                accounts_count = result[0]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                c.execute('''
                    UPDATE users 
                    SET paid_accounts = paid_accounts + ?
                    WHERE user_id = ?
                ''', (accounts_count, user_id))
                
                c.execute('COMMIT')
                return True
            
            c.execute('ROLLBACK')
            return False
            
        except Exception as e:
            c.execute('ROLLBACK')
            print(f"Error processing payment: {e}")
            return False
        finally:
            conn.close()

    async def get_available_accounts(self, user_id: str) -> int:
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            c.execute('SELECT paid_accounts FROM users WHERE user_id = ?', (user_id,))
            result = c.fetchone()
            paid_accounts = result[0] if result else 0
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö (3) –∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            return 3 + paid_accounts
        finally:
            conn.close()

    async def buy_accounts_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("1 –∞–∫–∫–∞—É–Ω—Ç - 200‚ÇΩ", callback_data='buy_1')],
            [InlineKeyboardButton("3 –∞–∫–∫–∞—É–Ω—Ç–∞ - 500‚ÇΩ", callback_data='buy_3')],
            [InlineKeyboardButton("5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - 800‚ÇΩ", callback_data='buy_5')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_accounts')]
        ]
        
        await update.callback_query.edit_message_text(
            "üíé –ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
            "‚Ä¢ –ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç\n"
            "‚Ä¢ –û–ø–ª–∞—Ç–∞ —Ä–∞–∑–æ–≤–∞—è (–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∞)\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def test_token_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if str(update.message.from_user.id) != os.getenv('ADMIN_TELEGRAM_ID'):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        try:
            payment_service = PaymentService(os.getenv('TOCHKA_JWT_TOKEN'))
            await payment_service.test_token()
            await update.message.reply_text("‚úÖ –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:\n{str(e)}")

class PaymentService:
    def __init__(self, jwt_token):
        self.jwt_token = jwt_token.strip()
        if not self.jwt_token.startswith('Bearer '):
            self.jwt_token = f'Bearer {self.jwt_token}'
        
        self.base_url = 'https://enter.tochka.com'
        self._merchant_info = None

    async def test_token(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            headers = {
                'Authorization': self.jwt_token,
                'Content-Type': 'application/json'
            }
            
            test_url = f'{self.base_url}/open/v2/customers'
            
            async with aiohttp.ClientSession() as session:
                async with session.get(test_url, headers=headers) as response:
                    response_text = await response.text()
                    logging.info(f"Test token response status: {response.status}")
                    logging.debug(f"Test token response: {response_text}")
                    
                    if response.status != 200:
                        raise Exception(f"{response.status}: {response_text}")
                    return True
        except Exception as e:
            logging.error(f"Token test failed: {str(e)}")
            raise

    async def _get_customer_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        if self._merchant_info is not None:
            return self._merchant_info

        headers = {
            'Authorization': self.jwt_token,
            'Content-Type': 'application/json'
        }

        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
            customers_url = f'{self.base_url}/open/v2/customers'
            async with session.get(customers_url, headers=headers) as response:
                response_text = await response.text()
                logging.debug(f"Customers response: {response_text}")
                
                if response.status != 200:
                    raise Exception(f"Error getting customers: {response_text}")
                
                data = await response.json()
                business_customer = next(
                    (c for c in data.get('customers', []) if c.get('customerType') == 'Business'),
                    None
                )
                
                if not business_customer:
                    raise Exception("No business customer found")
                
                customer_code = business_customer['customerCode']
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                customer_url = f'{self.base_url}/open/v2/customers/{customer_code}'
                async with session.get(
                    customer_url,
                    params={'bankCode': '044525104'},
                    headers=headers
                ) as response:
                    response_text = await response.text()
                    logging.debug(f"Customer details response: {response_text}")
                    
                    if response.status != 200:
                        raise Exception(f"Error getting customer info: {response_text}")
                    
                    customer_info = await response.json()
                    self._merchant_info = {
                        'merchantId': customer_info.get('merchantId'),
                        'accountId': customer_info.get('accountId')
                    }
                    
                    if not all(self._merchant_info.values()):
                        raise Exception("Invalid merchant info received")
                    
                    return self._merchant_info

    async def create_payment_qr(self, amount, accounts_count, user_id):
        """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        try:
            merchant_info = await self._get_customer_info()
            
            headers = {
                'Authorization': self.jwt_token,
                'Content-Type': 'application/json'
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Å–æ–≤—ã–π QR-–∫–æ–¥
            qr_url = f"{self.base_url}/sbp/v2/cashbox_qr_code"
            register_payload = {
                "accountId": merchant_info['accountId'],
                "merchantId": merchant_info['merchantId'],
                "redirectUrl": os.getenv("PAYMENT_SUCCESS_URL")
            }
            
            async with aiohttp.ClientSession() as session:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
                async with session.post(qr_url, json=register_payload, headers=headers) as response:
                    response_text = await response.text()
                    logging.info(f"QR registration status: {response.status}")
                    logging.debug(f"QR registration response: {response_text}")
                    
                    if response.status != 200:
                        raise Exception(f"QR registration failed: {response_text}")
                    
                    qr_data = await response.json()
                    qrc_id = qr_data.get('qrcId')
                    
                    if not qrc_id:
                        raise Exception("No QR code ID received")
                    
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å —Å—É–º–º–æ–π
                    activate_url = f"{self.base_url}/sbp/v2/cashbox_qr_code/{qrc_id}/activate"
                    activate_payload = {
                        "amount": int(amount * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                    }
                    
                    async with session.post(activate_url, json=activate_payload, headers=headers) as response:
                        response_text = await response.text()
                        logging.info(f"QR activation status: {response.status}")
                        logging.debug(f"QR activation response: {response_text}")
                        
                        if response.status != 200:
                            raise Exception(f"QR activation failed: {response_text}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                    conn = sqlite3.connect('avito_bot.db')
                    c = conn.cursor()
                    c.execute('''
                        INSERT INTO qr_payments 
                        (user_id, qrc_id, amount, accounts_count, status)
                        VALUES (?, ?, ?, ?, 'pending')
                    ''', (user_id, qrc_id, amount, accounts_count))
                    conn.commit()
                    conn.close()
                    
                    return {
                        'qrc_id': qrc_id,
                        'image': qr_data.get('image'),
                        'amount': amount
                    }
        except Exception as e:
            logging.error(f"Error creating QR payment: {e}")
            return None

    async def check_payment_status(self, qrc_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            headers = {
                'Authorization': self.jwt_token,
                'Content-Type': 'application/json'
            }
            
            status_url = f"{self.base_url}/sbp/v2/cashbox_qr_code/{qrc_id}/payment-status"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(status_url, headers=headers) as response:
                    response_text = await response.text()
                    logging.info(f"Payment status check: {response.status}")
                    logging.debug(f"Payment status response: {response_text}")
                    
                    if response.status != 200:
                        raise Exception(f"{response.status}: {response_text}")
                        
                    data = await response.json()
                    return data.get('status', 'PENDING')
        except Exception as e:
            logging.error(f"Error checking payment status: {e}")
            return 'ERROR'

bot = AvitoBot()  # –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

def main():
    if __name__ == '__main__':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = {
            "TOCHKA_JWT_TOKEN": os.getenv("TOCHKA_JWT_TOKEN"),
            "TOCHKA_CLIENT_ID": os.getenv("TOCHKA_CLIENT_ID"),
            "PAYMENT_SUCCESS_URL": os.getenv("PAYMENT_SUCCESS_URL"),
            "ADMIN_TELEGRAM_ID": os.getenv("ADMIN_TELEGRAM_ID")
        }
        
        missing_vars = [var for var, value in required_vars.items() if not value]
        
        if missing_vars:
            print("‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            for var in missing_vars:
                print(f"  - {var}")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            payment_service = PaymentService(os.getenv('TOCHKA_JWT_TOKEN'))
            
            bot = AvitoBot()
            print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
            application.add_handler(CommandHandler('test_token', bot.test_token_handler))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ check_messages
            async def check_messages_with_logs(context):
                print("\nüîÑ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
                users = bot.get_active_users()
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                await bot.check_messages(context)
                print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ send_reminder
            async def send_reminder(context):
                print("\nüì¢ –ó–∞–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                conn = sqlite3.connect(bot.db_path)
                c = conn.cursor()
                c.execute('SELECT user_id FROM users')
                users = c.fetchall()
                print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(users)}")
                conn.close()

                for user in users:
                    try:
                        await context.bot.send_message(
                            user[0],
                            "–ù–∞–ø–æ–º–∏–Ω–∞—é! –£ –Ω–∞—Å –µ—Å—Ç—å –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —á–∞—Ç–∞–º Avito!\n\n"
                            "üöÄ –° –ø–æ–º–æ—â—å—é @avsender_bot –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–≤–æ–∏–º —á–∞—Ç–∞–º\n"
                            "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º\n"
                            "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
                            "üëâ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏", url="t.me/avsender_bot")]
                            ])
                        )
                        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                        continue
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

            conv_handler = ConversationHandler(
                entry_points=[
                    CommandHandler('start', bot.start),
                    CallbackQueryHandler(bot.button_handler)
                ],
                states={
                    WAITING_CLIENT_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_client_id)],
                    WAITING_CLIENT_SECRET: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_client_secret)],
                    WAITING_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_user_id)],
                    WAITING_TEMPLATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_template)],
                    WAITING_IMAGE: [MessageHandler(filters.PHOTO, bot.handle_image)],  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                },
                fallbacks=[CommandHandler('start', bot.start)],
            )
            
            application.add_handler(conv_handler)
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
            job_queue = application.job_queue
            job_queue.run_repeating(check_messages_with_logs, interval=60, first=10)
            job_queue.run_repeating(send_reminder, interval=3*24*60*60, first=24*60*60)
            job_queue.run_repeating(bot.check_balance_periodically, interval=60*60, first=10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
            print("‚úÖ –ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
            print("\nüöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            logging.error(f"Startup error: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            sys.exit(1)

if __name__ == '__main__':
    main()